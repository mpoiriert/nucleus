<?php

namespace Nucleus\Dashboard;

use Symfony\Component\Validator\Validator;
use Symfony\Component\Validator\ConstraintViolationList;
use ReflectionClass;

class ModelDefinition
{
    const VALIDATE_WITH_VALIDATOR = 0;
    const VALIDATE_WITH_CALLBACK = 1;
    const VALIDATE_WITH_METHOD = 2;

    protected $className;

    protected $name;

    protected $fields = array();

    protected $actions = array();

    protected $loader;

    protected $validationMethod = ModelDefinition::VALIDATE_WITH_VALIDATOR;

    public static function create()
    {
        return new ModelDefinition();
    }

    public function setClassName($className)
    {
        $this->className = trim($className, '\\');
        if ($this->name === null) {
            $parts = explode('\\', $this->className);
            $this->name = array_pop($parts);
        }
        return $this;
    }

    public function getClassName()
    {
        return $this->className;
    }

    public function isAutoGenerated()
    {
        return $this->className === null;
    }

    public function setName($name)
    {
        $this->name = $name;
        return $this;
    }

    public function getName()
    {
        return $this->name;
    }

    public function setFields(array $fields)
    {
        $this->fields = array();
        array_map(array($this, 'addField'), $fields);
        return $this;
    }

    public function addField(FieldDefinition $field)
    {
        $this->fields[] = $field;
        return $this;
    }

    public function getField($name)
    {
        foreach ($this->fields as $field) {
            if ($field->getName() === $name) {
                return $field;
            }
        }
        return null;
    }

    public function getFieldByProperty($name)
    {
        foreach ($this->fields as $field) {
            if ($field->getProperty() === $name) {
                return $field;
            }
        }
        return null;
    }

    public function getIdentifierFields()
    {
        $idfields = array();
        foreach ($this->fields as $field) {
            if ($field->isIdentifier()) {
                $idfields[] = $field;
            }
        }
        return $idfields;
    }

    public function getStringReprField()
    {
        foreach ($this->fields as $field) {
            if ($field->isStringRepr()) {
                return $field;
            }
        }
        if ($ids = $this->getIdentifierFields()) {
            return $ids[0];
        }
        return $this->fields[0];
    }

    public function getFields()
    {
        return $this->fields;
    }

    public function getVisibleFields($visibility)
    {
        return array_filter($this->fields, function($f) use ($visibility) { 
            return $f->isVisible($visibility); });
    }

    public function setActions(array $actions)
    {
        $this->actions = array();
        array_map(array($this, 'addAction'), $actions);
        return $this;
    }

    public function addAction(ActionDefinition $action)
    {
        $this->actions[] = $action;
        return $this;
    }

    public function getAction($name)
    {
        foreach ($this->actions as $action) {
            if ($action->getName() === $name) {
                return $action;
            }
        }
        return false;
    }
    
    public function getActions()
    {
        return $this->actions;
    }

    public function setLoader($callback = null)
    {
        $this->loader = $callback;
        return $this;
    }

    public function getLoader()
    {
        return $this->loader;
    }

    public function hasLoader()
    {
        return $this->loader !== null;
    }

    public function setValidationMethod($method)
    {
        $this->validationMethod = $method;
        return $this;
    }

    public function getValidationMethod()
    {
        return $this->validationMethod;
    }

    public function setValidator($validator)
    {
        $this->validator = $validator;
        return $this;
    }

    public function getValidator()
    {
        return $this->validator;
    }

    /**
     * Loads a model using the $data according to the ModelDefinition (eg: using the model loader)
     * 
     * @param array $data
     * @return object
     */
    public function loadObject($data)
    {
        if ($this->loader === null) {
            return $this->instanciateObject($data);
        }

        $id = array();
        foreach ($this->getIdentifierFields() as $idf) {
            $id[] = $data[$idf->getProperty()];
        }

        if (count($id) === 1) {
            $args = array($id[0]);
        } else {
            $args = empty($id) ? $data : $id;
        }

        if (!($obj = call_user_func_array($this->loader, $args))) {
            return null;
        }

        $this->populateObject($obj, $data);
        return $obj;
    }

    /**
     * Creates a new object according to the ModelDefinition
     * 
     * @param array $data
     * @return object
     */
    public function instanciateObject($data = array())
    {
        if ($this->className !== null) {
            $class = new ReflectionClass($this->className);
            $obj = $class->newInstance();
        } else {
            $obj = new \stdClass();
        }
        $this->populateObject($obj, $data);
        return $obj;
    }

    /**
     * Populates an object with the specified data according to the given ModelDefinition
     * 
     * @param object $obj
     * @param array $data
     * @return object
     */
    public function populateObject($obj, $data)
    {
        foreach ($this->getVisibleFields(FieldDefinition::VISIBILITY_EDIT) as $f) {
            $p = $f->getProperty();
            if (!isset($data[$p])) {
                continue;
            }
            $f->setValue($obj, $data[$p]);
        }
        return $obj;
    }

    /**
     * Converts an object to an array representation according to the ModelDefinition
     * 
     * @param object $obj
     * @return array
     */
    public function convertObjectToArray($obj)
    {
        $array = array();
        $class = new ReflectionClass($obj);
        foreach ($this->getFields() as $f) {
            if (!$f->isArray() || !$f->hasRelatedModel()) {
                $array[$f->getProperty()] = $f->getValue($obj);
            }
        }
        return $array;
    }

    /**
     * Validates an object using fields validators
     * 
     * @param object $object
     */
    public function validateObject($object)
    {
        if ($this->validationMethod === self::VALIDATE_WITH_METHOD) {
            if (!method_exists($object, 'validate')) {
                throw new DefinitionBuilderException("Missing validate() method on object");
            }
            if (!call_user_func(array($object, 'validate'))) {
                $violations = implode("\n", $object->getValidationFailures());
                throw new ValidationException($violations);
            }
            return true;
        }

        if ($this->validationMethod === self::VALIDATE_WITH_CALLBACK) {
            if ($this->validator === null) {
                throw new DefinitionBuilderException("Missing validation callback");
            }
            return call_user_func($this->validator, array($object, $this));
        }

        if ($this->validator === null) {
            return true;
        }

        if ($this->className !== null) {
            $violiations = $this->validator->validate($object);
        } else {
            $violiations = new ConstraintViolationList();
            foreach ($this->fields as $field) {
                $value = $field->getValue($object);
                $violiations->addAll($this->validator->validateValue($value, $field->getConstraints()));
            }
        }

        if (count($violiations)) {
            throw new ValidationException($violiations);
        }
        return true;
    }
}
